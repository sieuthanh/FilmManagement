/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package statistics;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;

import javafx.application.Platform;

import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

import jxl.write.WriteException;

import com.sun.xml.internal.ws.api.ha.StickyFeature;

/**
 * 
 * @author thanh
 */
public class StatisticsPanel extends javax.swing.JPanel {

	/**
	 * Creates new form StatisticsPanel
	 */
	public StatisticsPanel() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private int state = 0;
	private Object[] colname = new String[] { "ID", "Amount", "Date" };
	private Object[][] data = {};
	private DefaultTableModel model = new DefaultTableModel(data, colname) {
		@Override
		public Class getColumnClass(int col) {
			Class returnValue;
			if ((col >= 0) && (col < getColumnCount())) {
				returnValue = getValueAt(0, col).getClass();
			} else {
				returnValue = Object.class;
			}
			return returnValue;
		}

		@Override
		// disable table's editable mode
		public boolean isCellEditable(int row, int col) {
			return false;
		}
	};

	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {
		Platform.setImplicitExit(false);
		jButton1 = new javax.swing.JButton();
		jButton2 = new javax.swing.JButton();
		jScrollPane1 = new javax.swing.JScrollPane();
		statisticsTable = new javax.swing.JTable();
		jButton3 = new javax.swing.JButton();
		jButton4 = new javax.swing.JButton();

		jButton1.setText("By Day");
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});

		jButton2.setText("By Month");
		jButton2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton2ActionPerformed(evt);
			}
		});

		statisticsTable.setModel(model);
		jScrollPane1.setViewportView(statisticsTable);

		jButton3.setText("View Chart");
		jButton3.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub

				SwingUtilities.invokeLater(new Runnable() {
					@Override
					public void run() {
						if (state == 0) {

						} else {

							new LineChartSample().initAndShowGUI(state);
						}
					}
				});

			}
		});
		jButton4.setText("To Excel");
		jButton4.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton4ActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addGap(58, 58, 58)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING,
												false)
												.addComponent(
														jButton2,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE)
												.addComponent(
														jButton1,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE)
												.addComponent(
														jButton4,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE))
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED,
										126, Short.MAX_VALUE)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING,
												false)
												.addComponent(jScrollPane1)
												.addComponent(
														jButton3,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE))
								.addGap(28, 28, 28)));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addGap(48, 48, 48)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.TRAILING)
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		jScrollPane1,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		150,
																		javax.swing.GroupLayout.PREFERRED_SIZE)
																.addGap(119,
																		119,
																		119)
																.addComponent(
																		jButton3))
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		jButton1,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		72,
																		javax.swing.GroupLayout.PREFERRED_SIZE)
																.addGap(37, 37,
																		37)
																.addComponent(
																		jButton2,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		73,
																		javax.swing.GroupLayout.PREFERRED_SIZE)
																.addGap(37, 37,
																		37)
																.addComponent(
																		jButton4,
																		javax.swing.GroupLayout.PREFERRED_SIZE,
																		73,
																		javax.swing.GroupLayout.PREFERRED_SIZE)))
								.addGap(0, 20, Short.MAX_VALUE)));
	}// </editor-fold>

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		Date today = new Date();
		int month = today.getMonth() + 1;
		int year = today.getYear() + 1900;
		StatisticUtil su = new StatisticUtil();
		ArrayList<Integer> result = new ArrayList<>();
		result = su.getStatisticEachDayInMonth(month, year);
		if (model.getRowCount() > 0) {
			for (int i = model.getRowCount() - 1; i >= 0; i--) {
				model.removeRow(i);
			}
		}
		for (int i = 0; i < result.size(); i++) {
			model.addRow(new Object[] { (i + 1), result.get(i),
					(i + 1) + "/" + month + "/" + year });
		}
		model.fireTableDataChanged();
		state = 1;
	}

	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		Date today = new Date();
		int year = today.getYear() + 1900;
		ArrayList<Integer> result = new ArrayList<>();
		StatisticUtil su = new StatisticUtil();
		result = su.getStatisticsEachMonthInYear(year);
		if (model.getRowCount() > 0) {
			for (int i = model.getRowCount() - 1; i >= 0; i--) {
				model.removeRow(i);
			}
		}
		for (int i = 0; i < result.size(); i++) {
			model.addRow(new Object[] { (i + 1), result.get(i),
					(i + 1) + "/" + year });
		}
		model.fireTableDataChanged();
		state = 2;
	}

	private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		if(state == 1){
			Date today = new Date();
			int month = today.getMonth() + 1;
			int year = today.getYear() + 1900;
			StatisticUtil su = new StatisticUtil();
			ArrayList<Integer> result = new ArrayList<>();
			result = su.getStatisticEachDayInMonth(month, year);
			WriteExcel we = new WriteExcel(result,state);
			we.setOutputFile("d:/StatisticsByDay.xls");
			try {
				we.write();
				JOptionPane.showMessageDialog(null, "Complete");
			} catch (WriteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}else if(state == 2){
			Date today = new Date();
			int year = today.getYear() + 1900;
			ArrayList<Integer> result = new ArrayList<>();
			StatisticUtil su = new StatisticUtil();
			result = su.getStatisticsEachMonthInYear(year);
			WriteExcel we = new WriteExcel(result,state);
			we.setOutputFile("d:/StatisticsByMonth.xls");
			JOptionPane.showMessageDialog(null, "Complete");
			try {
				we.write();
			} catch (WriteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}else{
			JOptionPane.showMessageDialog(null, "You have no information to extract");
		}
		
	}

	// Variables declaration - do not modify
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton2;
	private javax.swing.JButton jButton3;
	private javax.swing.JButton jButton4;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTable statisticsTable;
	// End of variables declaration
}
